Ð
9C:\workspace\ef-crud\src\Data\Context\ConfigureContext.cs
	namespace 	
Data
 
. 
Context 
{ 
public 

static 
class 
ConfigureContext (
{ 
public 
static 
void 
	Configure $
($ %
)% &
{ 	
using		 
var		 
context		 
=		 
new		  #
EfCrudContext		$ 1
(		1 2
)		2 3
;		3 4
context

 
.

 
Database

 
.

 
Migrate

 $
(

$ %
)

% &
;

& '
} 	
} 
} ý
6C:\workspace\ef-crud\src\Data\Context\EfCrudContext.cs
	namespace 	
Data
 
. 
Context 
{ 
public 

class 
EfCrudContext 
:  
	DbContext! *
{		 
public

 
DbSet

 
<

 
Caminhao

 
>

 
	Caminhoes

 (
{

) *
get

+ .
;

. /
set

0 3
;

3 4
}

5 6
=

7 8
null

9 =
!

= >
;

> ?
	protected 
override 
void 
OnConfiguring  -
(- .#
DbContextOptionsBuilder. E
optionsBuilderF T
)T U
{ 	
optionsBuilder 
. 
	UseSqlite $
($ %
AppSettings% 0
.0 1
SqliteConnection1 A
)A B
;B C
} 	
	protected 
override 
void 
OnModelCreating  /
(/ 0
ModelBuilder0 <
modelBuilder= I
)I J
{ 	
BaseModelMap 
. 
Map 
( 
modelBuilder )
)) *
;* +
modelBuilder 
. 
Entity 
<  
Caminhao  (
>( )
() *
)* +
.+ ,
ToTable, 3
(3 4
$str4 ?
)? @
;@ A
} 	
} 
} ¯
4C:\workspace\ef-crud\src\Data\Context\IUnitOfWork.cs
	namespace 	
Data
 
. 
Context 
{ 
public 

	interface 
IUnitOfWork  
{ 
public 
	DbContext 
Context  
(  !
)! "
;" #
public		 
Task		 

BeginAsync		 
(		 
)		  
;		  !
public

 
Task

 
CommitAsync

 
(

  
)

  !
;

! "
public 
Task 
RollbackAsync !
(! "
)" #
;# $
} 
} ù
3C:\workspace\ef-crud\src\Data\Context\UnitOfWork.cs
	namespace 	
Data
 
. 
Context 
{ 
public 

class 

UnitOfWork 
: 
IUnitOfWork )
{		 
private

 
readonly

 
EfCrudContext

 &
context

' .
;

. /
private !
IDbContextTransaction %
?% &
transaction' 2
;2 3
public 

UnitOfWork 
( 
EfCrudContext '
context( /
)/ 0
=>1 3
this4 8
.8 9
context9 @
=A B
contextC J
;J K
public 
	DbContext 
Context  
(  !
)! "
=># %
context& -
;- .
public 
async 
Task 

BeginAsync $
($ %
)% &
{ 	
if 
( 
transaction 
. 
IsNull "
(" #
)# $
)$ %
transaction 
= 
await #
context$ +
.+ ,
Database, 4
.4 5!
BeginTransactionAsync5 J
(J K
)K L
;L M
} 	
public 
async 
Task 
CommitAsync %
(% &
)& '
{ 	
if 
( 
transaction 
. 
IsNull "
(" #
)# $
)$ %
return 
; 
await 
transaction 
. 
CommitAsync )
() *
)* +
;+ ,
CloseTransaction 
( 
) 
; 
} 	
public   
async   
Task   
RollbackAsync   '
(  ' (
)  ( )
{!! 	
if"" 
("" 
transaction"" 
."" 
IsNull"" "
(""" #
)""# $
)""$ %
return## 
;## 
await%% 
transaction%% 
.%% 
RollbackAsync%% +
(%%+ ,
)%%, -
;%%- .
CloseTransaction&& 
(&& 
)&& 
;&& 
}'' 	
private)) 
void)) 
CloseTransaction)) %
())% &
)))& '
{** 	
transaction++ 
?++ 
.++ 
Dispose++  
(++  !
)++! "
;++" #
transaction,, 
=,, 
null,, 
;,, 
}-- 	
~// 	

UnitOfWork//	 
(// 
)// 
{00 	
transaction11 
?11 
.11 
Dispose11  
(11  !
)11! "
;11" #
context22 
.22 
Dispose22 
(22 
)22 
;22 
}33 	
}44 
}55 š
5C:\workspace\ef-crud\src\Data\Mapping\BaseModelMap.cs
	namespace 	
Data
 
. 
Mapping 
{ 
public 

static 
class 
BaseModelMap $
{		 
public

 
static

 
void

 
Map

 
(

 
ModelBuilder

 +
modelBuilder

, 8
)

8 9
{ 	
var 
assembly 
= 
Assembly #
.# $
GetAssembly$ /
(/ 0
typeof0 6
(6 7
	BaseModel7 @
)@ A
)A B
!B C
;C D
var 
classes 
= 
assembly "
." #
GetTypes# +
(+ ,
), -
. 
Where 
( 
a 
=> 
a 
. 
IsSubclassOf *
(* +
typeof+ 1
(1 2
	BaseModel2 ;
); <
)< =
)= >
;> ?
foreach 
( 
var 
classe 
in  "
classes# *
)* +
{ 
var 
builder 
= 
modelBuilder *
.* +
Entity+ 1
(1 2
classe2 8
)8 9
;9 :
builder 
. 
Ignore 
( 
$str &
)& '
;' (
builder 
. 
Ignore 
( 
$str 1
)1 2
;2 3
} 
} 	
} 
} ¡
HC:\workspace\ef-crud\src\Data\Migrations\20200208111549_InitialCreate.cs
	namespace 	
Data
 
. 

Migrations 
{ 
public 

partial 
class 
InitialCreate &
:' (
	Migration) 2
{ 
	protected 
override 
void 
Up  "
(" #
MigrationBuilder# 3
migrationBuilder4 D
)D E
{ 	
migrationBuilder		 
.		 
CreateTable		 (
(		( )
name

 
:

 
$str

 !
,

! "
columns 
: 
table 
=> !
new" %
{ 
Id 
= 
table 
. 
Column %
<% &
long& *
>* +
(+ ,
nullable, 4
:4 5
false6 ;
); <
. 

Annotation #
(# $
$str$ :
,: ;
true< @
)@ A
,A B
Modelo 
= 
table "
." #
Column# )
<) *
int* -
>- .
(. /
nullable/ 7
:7 8
false9 >
)> ?
,? @
AnoFabricacao !
=" #
table$ )
.) *
Column* 0
<0 1
short1 6
>6 7
(7 8
nullable8 @
:@ A
falseB G
)G H
,H I
	AnoModelo 
= 
table  %
.% &
Column& ,
<, -
short- 2
>2 3
(3 4
nullable4 <
:< =
false> C
)C D
} 
, 
constraints 
: 
table "
=># %
{ 
table 
. 

PrimaryKey $
($ %
$str% 3
,3 4
x5 6
=>7 9
x: ;
.; <
Id< >
)> ?
;? @
} 
) 
; 
} 	
	protected 
override 
void 
Down  $
($ %
MigrationBuilder% 5
migrationBuilder6 F
)F G
{ 	
migrationBuilder 
. 
	DropTable &
(& '
name 
: 
$str !
)! "
;" #
} 	
} 
} Ä
JC:\workspace\ef-crud\src\Data\Repositories\Caminhoes\CaminhaoRepository.cs
	namespace 	
Data
 
. 
Repositories 
. 
	Caminhoes %
{ 
public 

class 
CaminhaoRepository #
:$ %

Repository& 0
<0 1
Caminhao1 9
>9 :
,: ;
ICaminhaoRepository< O
{ 
public 
CaminhaoRepository !
(! "
IUnitOfWork" -

unitOfWork. 8
)8 9
:: ;
base< @
(@ A

unitOfWorkA K
)K L
{		 	
}

 	
} 
} £
KC:\workspace\ef-crud\src\Data\Repositories\Caminhoes\ICaminhaoRepository.cs
	namespace 	
Data
 
. 
Repositories 
. 
	Caminhoes %
{ 
public 

	interface 
ICaminhaoRepository (
:) *
IRepository+ 6
<6 7
Caminhao7 ?
>? @
{ 
} 
} ˆ
9C:\workspace\ef-crud\src\Data\Repositories\IRepository.cs
	namespace 	
Data
 
. 
Repositories 
{ 
public 

	interface 
IRepository  
<  !
TModel! '
>' (
where 
TModel 
: 
	BaseModel  
{		 
public

 
Task

 
<

 
IEnumerable

 
<

  
TModel

  &
>

& '
>

' (

ObterTodos

) 3
(

3 4
)

4 5
;

5 6
public 
Task 
< 
TModel 
> 
ObterPor $
($ %
long% )
id* ,
), -
;- .
public 
Task 
Inserir 
( 
TModel "
model# (
)( )
;) *
public 
Task 
AtualizarTudo !
(! "
TModel" (
model) .
). /
;/ 0
public 
Task 
Excluir 
( 
TModel "
model# (
)( )
;) *
public 
Task 
< 
bool 
> 
IdExistente %
(% &
long& *
id+ -
)- .
;. /
} 
} ö#
8C:\workspace\ef-crud\src\Data\Repositories\Repository.cs
	namespace 	
Data
 
. 
Repositories 
{ 
public		 

abstract		 
class		 

Repository		 $
<		$ %
TModel		% +
>		+ ,
:		- .
IRepository		/ :
<		: ;
TModel		; A
>		A B
where

 
TModel

 
:

 
	BaseModel

  
{ 
private 
readonly 
IUnitOfWork $

unitOfWork% /
;/ 0
	protected 

Repository 
( 
IUnitOfWork (

unitOfWork) 3
)3 4
{ 	
this 
. 

unitOfWork 
= 

unitOfWork (
;( )
} 	
	protected 
	DbContext 
Context #
(# $
)$ %
=>& (

unitOfWork) 3
.3 4
Context4 ;
(; <
)< =
;= >
public 
async 
Task 
< 
IEnumerable %
<% &
TModel& ,
>, -
>- .

ObterTodos/ 9
(9 :
): ;
=>< >
await 
Context 
( 
) 
. 
Set 
<  
TModel  &
>& '
(' (
)( )
.) *
ToArrayAsync* 6
(6 7
)7 8
;8 9
public 
async 
Task 
< 
TModel  
>  !
ObterPor" *
(* +
long+ /
id0 2
)2 3
=>4 6
await 
Context 
( 
) 
. 
Set 
<  
TModel  &
>& '
(' (
)( )
.) *
FirstOrDefaultAsync* =
(= >
m> ?
=>@ B
mC D
.D E
IdE G
==H J
idK M
)M N
;N O
public 
async 
Task 
Inserir !
(! "
TModel" (
model) .
). /
{ 	
Context 
( 
) 
. 
Set 
< 
TModel  
>  !
(! "
)" #
.# $
Add$ '
(' (
model( -
)- .
;. /
await 
Context 
( 
) 
. 
SaveChangesAsync ,
(, -
)- .
;. /
} 	
public!! 
async!! 
Task!! 
AtualizarTudo!! '
(!!' (
TModel!!( .
model!!/ 4
)!!4 5
{"" 	
Context## 
(## 
)## 
.## 
Set## 
<## 
TModel##  
>##  !
(##! "
)##" #
.### $
Update##$ *
(##* +
model##+ 0
)##0 1
;##1 2
await$$ 
Context$$ 
($$ 
)$$ 
.$$ 
SaveChangesAsync$$ ,
($$, -
)$$- .
;$$. /
}%% 	
public'' 
async'' 
Task'' 
Excluir'' !
(''! "
TModel''" (
model'') .
)''. /
{(( 	
Context)) 
()) 
))) 
.)) 
Set)) 
<)) 
TModel))  
>))  !
())! "
)))" #
.))# $
Remove))$ *
())* +
model))+ 0
)))0 1
;))1 2
await** 
Context** 
(** 
)** 
.** 
SaveChangesAsync** ,
(**, -
)**- .
;**. /
}++ 	
public-- 
async-- 
Task-- 
<-- 
bool-- 
>-- 
IdExistente--  +
(--+ ,
long--, 0
id--1 3
)--3 4
{.. 	
return// 
await// 
Context//  
(//  !
)//! "
.//" #
Set//# &
<//& '
TModel//' -
>//- .
(//. /
)/// 0
.//0 1
AnyAsync//1 9
(//9 :
m//: ;
=>//< >
m//? @
.//@ A
Id//A C
==//D F
id//G I
)//I J
;//J K
}00 	
}11 
}22 Ë
+C:\workspace\ef-crud\src\Data\SampleData.cs
	namespace 	
Data
 
{ 
public 

class 

SampleData 
{ 
} 
} 